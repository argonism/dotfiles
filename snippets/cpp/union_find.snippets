snippet union_find
class UnionFind {
		public:
				// contain parent node_index
				// if the node_id is root, -size(group)
				vector<int> parent;
				long long root(int);
				long long size(int);

				// judging functions
				bool join(int, int);
				bool same(int, int);

				UnionFind(int x) {
						parent = vector<int>(x, -1);
				};

};


long long UnionFind::root(int node_id) {
		if (parent[node_id] < 0) return node_id;
		else return parent[node_id] = UnionFind::root(parent[node_id]);
}


long long UnionFind::size(int node_id) {
		return -parent[UnionFind::root(node_id)];
}


bool UnionFind::same(int source_node_id, int target_node_id) {
		return UnionFind::root(source_node_id) == UnionFind::root(target_node_id);
}


bool UnionFind::join(int source_node_id, int target_node_id) {
		int a = UnionFind::root(source_node_id);
		int b = UnionFind::root(target_node_id);
		if (a == b) return false;

		if (UnionFind::size(a) < UnionFind::size(b)) swap(a, b);
		parent[a] += parent[b];
		parent[b] = a;

		return true;
}
endsnippet
