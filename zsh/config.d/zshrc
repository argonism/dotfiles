#
# .zshrc - The zsh configuration
#

bindkey -e

# For Zsh on Windows WSL
bindkey  "^[[H"   beginning-of-line
bindkey  "^[[F"   end-of-line

autoload -U compinit
autoload -U colors; colors
zstyle ':completion:*:default' menu select=1

setopt auto_cd correct
setopt auto_param_keys
setopt auto_param_slash
setopt complete_in_word
setopt extended_history share_history
setopt magic_equal_subst
setopt mark_dirs
setopt no_beep
setopt prompt_subst

function ls () {
  case ${OSTYPE} in
    darwin*)
      command ls -G $@ ;;
    linux*)
      command ls --color $@ ;;
  esac
}

function chpwd () {
  ls
}

function date () {
  case ${OSTYPE} in
    darwin*)
      command gdate $@ ;;
    linux*)
      command date $@;;
  esac
}


export EDITOR=vim
export GHQ_ROOT=$HOME/work
export GOPATH=$HOME/go
export FZF_DEFAULT_OPTS='--height 50% --reverse --border'
export HISTFILE=$HOME/.zsh-history
export HISTSIZE=100000
export LANG=en_US.UTF-8
export LC_CTYPE=en_US.UTF-8
export PYTHONDONTWRITEBYTECODE=1
export SAVEHIST=100000
export XDG_CONFIG_HOME=$HOME/.config
export ZPLUG_HOME=$HOME/.config/zplug
export ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=241"

if [ "$COLORTERM" = "gnome-terminal" ]; then export TERM=xterm-256color; fi
if [ "$COLORTERM" = "xfce4-terminal" ]; then export TERM=xterm-256color; fi
if [ "$COLORTERM" = "rxvt-xpm" ]; then export TERM=rxvt-256color; fi

case `uname -s` in
Darwin*)
  if [ `uname -m` = "arm64" ]; then
    export PATH=/opt/homebrew/bin:$PATH
  else
    export PATH=/opt/homebrew-x86_64/bin:$PATH
  fi
  ;;
Linux*)
  export PATH=/home/linuxbrew/.linuxbrew/bin:$PATH
  export PATH=$HOME/.linuxbrew/bin:$PATH
  ;;
esac

for prefix in $HOME/.local $HOME/dotfiles $BREW_HOME/opt/llvm $GOPATH; do
  export PATH=$PATH:$prefix/bin
done

if command -v brew > /dev/null; then
  export BREW_HOME=$(brew --prefix)
  export PYTHONSYSTEMPATH=$BREW_HOME/bin/python3
else
  export PYTHONSYSTEMPATH=$(which python3)
fi

if command -v rbenv > /dev/null; then
  eval "$(rbenv init -)"
fi

if command -v nodebrew > /dev/null; then
  export PATH=$HOME/.nodebrew/current/bin:$PATH
fi


if [ ! -z "$WSL_INTEROP" ]; then
  export SSH_AUTH_SOCK=$HOME/.ssh/agent.sock
  ss -a | grep -q $SSH_AUTH_SOCK
  if [ $? -ne 0 ]; then
    rm -f $SSH_AUTH_SOCK
    ( setsid socat UNIX-LISTEN:$SSH_AUTH_SOCK,fork EXEC:"/mnt/c/Users/ma02k/wsl-ssh-agent/npiperelay.exe -ei -s //./pipe/openssh-ssh-agent",nofork & ) >/dev/null 2>&1
  fi
fi

if command -v nvidia-smi > /dev/null; then
  export PATH=/usr/local/cuda/bin:$PATH
  export LD_LIBRARY_PATH=~/.cudnn/active/cuda/lib64:$LD_LIBRARY_PATH
  export CPATH=~/.cudnn/active/cuda/include:$CPATH
  export LIBRARY_PATH=~/.cudnn/active/cuda/lib64:$LIBRARY_PATH
fi

if command -v nvim > /dev/null; then
  function vim () {
    nvim $@
  }

  export EDITOR=nvim
fi

if command -v tmux > /dev/null; then
  function attach_or_create_tmux_session () {
    if [ ! -z $DISABLE_TMUX ]; then return; fi
    if [ ! -z $TMUX_PANE ]; then return; fi
    if [ "$TERM_PROGRAM" = "vscode" ]; then return; fi
    if [ ! -z "$__INTELLIJ_COMMAND_HISTFILE__" ]; then return; fi
    if [ ! -z "$WSL_INTEROP" ]; then return; fi
    if tmux has-session; then tmux attach; else tmux; fi
  }

  function ssh () {
    if [ "$(ps -p $(ps -p $$ -o ppid=) -o comm=)" = "tmux" ]; then
      tmux rename-window ${@: -1}
      command ssh "$@"
      tmux set-window-option automatic-rename "on" 1>/dev/null
    else
      command ssh "$@"
    fi
  }

  # auto launch happens only on remote host
  if [[ $(hostname) != *.local ]]; then
    attach_or_create_tmux_session
  fi
fi

if command -v fzf > /dev/null; then
  function fzf-change-dir () {
    local target=$(find ${1:-.} -path '*/\.*' -prune -o -type d -print 2> /dev/null | fzf +m)
    if [ "$target" != "" ]; then BUFFER="cd $target"; fi
    zle accept-line
  }

  function fzf-z-search () {
    local target=$(z | sort -rn | cut -c 12- | fzf)
    if [ "$target" != "" ]; then BUFFER="cd $target"; fi
    zle accept-line
  }

  function fzf-select-history () {
    BUFFER=$(history -n -r 1 | fzf --no-sort +m --query "$LBUFFER" --prompt="History > ")
    CURSOR=$#BUFFER
  }

  bindkey '^t' fzf-change-dir
  bindkey '^y' fzf-z-search
  bindkey '^r' fzf-select-history

  zle -N fzf-change-dir
  zle -N fzf-select-history
  zle -N fzf-z-search
fi

function parse_git_branch() {
  (git symbolic-ref -q HEAD || git name-rev --name-only --no-undefined --always HEAD) 2> /dev/null
}

function git_prompt_string() {
  local git_branch="$(parse_git_branch)"
  if [ -n "$git_branch" ]; then
    STATUS=" @ $fg[red]${${git_branch}#(refs/heads/|tags/)}${reset_color}"

    if [[ -n $(git ls-files --other --exclude-standard 2> /dev/null) ]]; then
      STATUS+=" %{$fg[red]%}●%{$reset_color%}"
    fi

    if ! git diff --quiet 2> /dev/null; then
      STATUS+=" %{$fg[yellow]%}●%{$reset_color%}"
    fi

    if ! git diff --cached --quiet 2> /dev/null; then
      STATUS+="%{$fg[green]%} ● %{$reset_color%}"
    fi

    echo $STATUS
  fi
}

function current_path () {
  echo "%{${fg[yellow]}%}[%~]%{${reset_color}%}"
}

function current_timestamp () {
  echo "%{$fg_bold[blue]%}$(date +'%Y-%m-%d %H:%M:%S')%{${reset_color}%}"
}

PROMPT=''
PROMPT+='$(current_timestamp)'
PROMPT+=' '
PROMPT+='$(current_path)'
PROMPT+='$(git_prompt_string)'
PROMPT+=$'\n'
PROMPT+='> '
SPROMPT="%{${fg[red]}%}%r is correct? [y, n, a, e]:%{${reset_color}%}"

if [ -e $ZPLUG_HOME/init.zsh ]; then
  source $ZPLUG_HOME/init.zsh

  zplug "rupa/z", use:"z.sh"
  zplug "stedolan/jq", from:gh-r, as:command, rename-to:jq
  zplug "tarruda/zsh-autosuggestions", use:"zsh-autosuggestions.zsh"
  zplug "zsh-users/zsh-history-substring-search"
  zplug "zsh-users/zsh-syntax-highlighting", defer:2

  # check whether if there are packages which it can install
  if ! zplug check --verbose; then
    zplug install
  fi

  zplug load
fi
