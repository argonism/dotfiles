#
# .zshrc - The zsh configuration
#

bindkey -e

# For Zsh on Windows WSL
bindkey  "^[[H"   beginning-of-line
bindkey  "^[[F"   end-of-line

autoload -Uz compinit && compinit
autoload -U colors && colors
zstyle ':completion:*:default' menu select=1

setopt auto_cd
setopt correct
setopt auto_param_keys
setopt auto_param_slash
setopt complete_aliases
setopt complete_in_word
setopt extended_history
setopt share_history
setopt magic_equal_subst
setopt mark_dirs
setopt no_beep
setopt prompt_subst

function ls () {
  case ${OSTYPE} in
    darwin*)
      command ls -G $@ ;;
    linux*)
      command ls --color $@ ;;
  esac
}

function date () {
  case ${OSTYPE} in
    darwin*)
      command gdate $@ ;;
    linux*)
      command date $@;;
  esac
}

function retcode () {
  echo $?
}

function clean_platform_specific_env () {
  export PATH=`clean-platform-specific-env $HOMEBREW_ROOT $PYENV_ROOT $NODENV_ROOT`
}

function amd64 () {
  if [ `uname -m` = 'arm64' ]; then
    if type deactivate > /dev/null 2>&1; then
      echo "Automatically deactivate virtualenv"
      deactivate
    fi

    clean_platform_specific_env
    arch -x86_64 zsh
  fi
}

function arm64 () {
  if [ `uname -m` = 'x86_64' ]; then
    if type deactivate > /dev/null 2>&1; then
      echo "Automatically deactivate virtualenv"
      deactivate
    fi

    clean_platform_specific_env
    arch -arm64 zsh
  fi
}

if type wslvar > /dev/null 2>&1; then
  export CLIPBOARD_APP=clip.exe
else
  case ${OSTYPE} in
    darwin*)
      export CLIPBOARD_APP=pbcopy;;
    linux*)
      export CLIPBOARD_APP="xsel --clipboard --input";;
  esac
fi

alias ghome='cd `git rev-parse --show-toplevel`'

export EDITOR=vim
export FZF_DEFAULT_OPTS='--height 50% --reverse --border'
export GOPATH=$HOME/go
export GHQ_ROOT=$HOME/work
export HISTFILE=$HOME/.zsh-history
export HISTSIZE=100000
export PYTHONDONTWRITEBYTECODE=1
export SAVEHIST=100000
export XDG_CONFIG_HOME=$HOME/.config
export ZPLUG_HOME=$HOME/.config/zplug
export ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=241"

if [ "$COLORTERM" = "gnome-terminal" ]; then export TERM=xterm-256color; fi
if [ "$COLORTERM" = "xfce4-terminal" ]; then export TERM=xterm-256color; fi
if [ "$COLORTERM" = "rxvt-xpm" ]; then export TERM=rxvt-256color; fi

language=en_US.UTF-8
if [ "`locale -a | grep $language`" != $language ]; then
  # If `en_US.UTF-8` is not available, fallback to `C.utf8`
  language=C.utf8
fi
export LANG=$language
export LC_CTYPE=$language

case `uname -s` in
Darwin*)
  if [ `uname -m` = "arm64" ]; then
    export HOMEBREW_ROOT=/opt/homebrew
    export PYENV_ROOT=$HOME/.pyenv-arm64
    export NODENV_ROOT=$HOME/.nodenv-arm64
  else
    export HOMEBREW_ROOT=/opt/homebrew-x86_64
    export PYENV_ROOT=$HOME/.pyenv
    export NODENV_ROOT=$HOME/.nodenv
  fi

  export PATH=$HOMEBREW_ROOT/sbin:$PATH
  export PATH=$HOMEBREW_ROOT/bin:$PATH
  ;;
Linux*)
  eval `ssh-agent -s`

  export PATH=/home/linuxbrew/.linuxbrew/bin:$PATH
  export PATH=/home/linuxbrew/.linuxbrew/sbin:$PATH
  export PATH=$HOME/.linuxbrew/bin:$PATH
  export PATH=$HOME/.linuxbrew/sbin:$PATH
  ;;
esac

for prefix in $HOME $HOME/.local $HOME/dotfiles $GOPATH; do
  export PATH=$PATH:$prefix/bin
done

if command -v brew > /dev/null; then
  export BREW_HOME=$(brew --prefix)
  export HOMEBREW_NO_AUTO_UPDATE=1
  export PYTHONSYSTEMPATH=$BREW_HOME/bin/python3
  eval $(brew shellenv)

  if [ "$(brew --prefix xz 2> /dev/null)" != "" ]; then
    export CONFIGURE_OPTS="--enable-shared"
    export CPPFLAGS="-I$(brew --prefix xz)/include"
    export LDFLAGS="-L$(brew --prefix xz)/lib"
  fi
else
  export PYTHONSYSTEMPATH=$(which python3)
fi

if command -v sheldon > /dev/null; then
  eval "$(sheldon source)"
fi

if command -v rbenv > /dev/null; then
  eval "$(rbenv init -)"
fi

if command -v pyenv > /dev/null; then
  eval "$(pyenv init -)"
fi

if command -v nodenv > /dev/null; then
  eval "$(nodenv init -)"
fi

if command -v nodebrew > /dev/null; then
  export PATH=$HOME/.nodebrew/current/bin:$PATH
fi

if command -v nvim > /dev/null; then
  alias vim=nvim
  export EDITOR=nvim
fi

if command -v tmux > /dev/null; then
  function attach_or_create_tmux_session () {
    if [ ! -z $DISABLE_TMUX ]; then return; fi
    if [ ! -z $TMUX_PANE ]; then return; fi
    if [ "$TERM_PROGRAM" = "vscode" ]; then return; fi
    if [ ! -z "$__INTELLIJ_COMMAND_HISTFILE__" ]; then return; fi
    if [ ! -z "$WSL_INTEROP" ]; then return; fi
    if tmux has-session; then tmux attach; else tmux; fi
  }

  function ssh () {
    if [ "$(ps -p $(ps -p $$ -o ppid=) -o comm=)" = "tmux" ]; then
      tmux rename-window ${@: -1}
      command ssh "$@"
      tmux set-window-option automatic-rename "on" 1>/dev/null
    else
      command ssh "$@"
    fi
  }

  # auto launch happens only on remote host
  if [[ $(hostname) != *.local ]]; then
    attach_or_create_tmux_session
  fi
fi

if command -v fzf > /dev/null; then
  function cd-f () {
    cd $(find . -type d -print 2> /dev/null | fzf --prompt ">>> ")
  }

  function cd-z () {
    if [ -z "$1" ]; then
      cd $(z | sort -rh | awk '{print $2}' | fzf --prompt ">>> ")
    else
      _z $1
    fi
  }

  function hist-f () {
    BUFFER=$(history -n -r 1 | fzf --no-sort +m --query "$LBUFFER" --prompt=">>> ")
    zle accept-line
  }

  bindkey '^t' cd-f
  bindkey '^y' cd-z
  bindkey '^r' hist-f

  zle -N cd-f
  zle -N cd-z
  zle -N hist-f
fi

function parse_git_branch() {
  (git symbolic-ref -q HEAD || git name-rev --name-only --no-undefined --always HEAD) 2> /dev/null
}

function current_architecture () {
  local architecture="$(uname -m)"

  if [ "$architecture" = "x86_64" ] ; then
    echo "[\033[1;32m$architecture\033[0m] "
  elif [ "$architecture" = "arm64" ]; then
    echo "[\033[1;31m$architecture\033[0m] "
  fi
}

function current_context () {
  if command -v kubectl > /dev/null; then
    kubectl config current-context &> /dev/null
    kubectl_exit_code=$?
    if [ "$kubectl_exit_code" -eq 0 ]; then
      echo "[%{$fg[blue]%}$(kubectl config current-context)%{${reset_color}%}] "
    else
      echo ""
    fi
  else
    echo ""
  fi
}

function current_path () {
  echo "[%{${fg[yellow]}%}%~%{${reset_color}%}] "
}

function current_timestamp () {
  echo "[%{$fg_bold[blue]%}$(date +'%Y-%m-%d %H:%M:%S')%{${reset_color}%}]"
}

function current_git_status () {
  local git_branch="$(parse_git_branch)"
  if [ -n "$git_branch" ]; then
    STATUS="@ $fg[red]${${git_branch}#(refs/heads/|tags/)}${reset_color} "

    if [[ -n $(git ls-files --other --exclude-standard 2> /dev/null) ]]; then
      STATUS+="%{$fg[red]%}●%{$reset_color%} "
    fi

    if ! git diff --quiet 2> /dev/null; then
      STATUS+="%{$fg[yellow]%}●%{$reset_color%} "
    fi

    if ! git diff --cached --quiet 2> /dev/null; then
      STATUS+="%{$fg[green]%}●%{$reset_color%} "
    fi

    echo $STATUS
  fi
}

LF=$'\n'
PROMPT=''
PROMPT+='$(current_architecture)'
PROMPT+='$(current_context)'
PROMPT+='$(current_path)'
PROMPT+='$(current_git_status)'
PROMPT+='${LF}> '
RPROMPT='$(current_timestamp)'
SPROMPT="%{${fg[red]}%}%r is correct? [y, n, a, e]:%{${reset_color}%}"

if command -v kubectl > /dev/null; then
  source <(kubectl completion zsh)
  alias k=kubectl
  compdef _kubectl k
fi

# custom zsh script
for source in $XDG_CONFIG_HOME/dotfiles/zsh/*.zsh
do
  source $source
done
