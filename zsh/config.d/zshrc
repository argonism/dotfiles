#
# .zshrc - The zsh configuration
#

bindkey -e

autoload -Uz compinit && compinit
autoload -U colors && colors
autoload -Uz zmv && alias zmv='noglob zmv -W'
zstyle ':completion:*:default' menu select=1

setopt auto_cd
setopt correct
setopt auto_param_keys
setopt auto_param_slash
setopt complete_aliases
setopt complete_in_word
setopt extended_history
setopt share_history
setopt magic_equal_subst
setopt mark_dirs
setopt no_beep
setopt prompt_subst

function ls () {
  case ${OSTYPE} in
    darwin*)
      command ls -G $@ ;;
    linux*)
      command ls --color $@ ;;
  esac
}

function date () {
  case ${OSTYPE} in
    darwin*)
      command gdate $@ ;;
    linux*)
      command date $@ ;;
  esac
}

function retcode () {
  echo $?
}

function current_platform () {
  local platform="$(uname -m)"

  if [ "$platform" = "x86_64" ] ; then
    echo "[\033[1;32m$platform\033[0m]"
  elif [ "$platform" = "arm64" ]; then
    echo "[\033[1;31m$platform\033[0m]"
  fi
}

if type wslvar > /dev/null 2>&1; then
  export CLIPBOARD_APP=clip.exe
else
  case ${OSTYPE} in
    darwin*)
      export CLIPBOARD_APP=pbcopy;;
    linux*)
      export CLIPBOARD_APP="xsel --clipboard --input";;
  esac
fi

alias git-home='cd `git rev-parse --show-toplevel`'
alias t='tips'

export EDITOR=vim
export FZF_DEFAULT_OPTS='--height 50% --reverse --border'
export GOPATH=$HOME/go
export GHQ_ROOT=$HOME/work
export HISTFILE=$HOME/.zsh-history
export HISTSIZE=100000
export PYTHONDONTWRITEBYTECODE=1
export SAVEHIST=100000
export XDG_CONFIG_HOME=$HOME/.config
export ZPLUG_HOME=$HOME/.config/zplug
export ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=241"
export HIMKT_DOTFILES_PRIVATE_CONFIG_DIR=$XDG_CONFIG_HOME/himkt/dotfiles/zsh/config.d

if [ "$COLORTERM" = "gnome-terminal" ]; then export TERM=xterm-256color; fi
if [ "$COLORTERM" = "xfce4-terminal" ]; then export TERM=xterm-256color; fi
if [ "$COLORTERM" = "rxvt-xpm" ]; then export TERM=rxvt-256color; fi

language=en_US.UTF-8
# If `en_US.UTF-8` is not available, fallback to `C.utf8`
if [ "`locale -a | grep $language`" != $language ]; then
  language=C.utf8
fi
export LANG=$language
export LC_CTYPE=$language

for source in $(find $HIMKT_DOTFILES_PRIVATE_CONFIG_DIR -name "*.pre.zsh")
do
  source $source
done

case `uname -s` in
Darwin*)
  if [ `uname -m` = "arm64" ]; then
    export HOMEBREW_ROOT=/opt/homebrew
    export HOMEBREW_CACHE=$HOME/.cache/Homebrew
    export PYENV_ROOT=$HOME/.pyenv-arm64
    export NODENV_ROOT=$HOME/.nodenv-arm64
    export RYE_HOME=$HOME/.rye-arm64
  else
    export HOMEBREW_ROOT=/opt/homebrew-x86_64
    export HOMEBREW_CACHE=$HOME/.cache/Homebrew-x86_64
    export PYENV_ROOT=$HOME/.pyenv
    export NODENV_ROOT=$HOME/.nodenv
    export RYE_HOME=$HOME/.rye-x86_64
  fi

  ;;
Linux*)
  eval `ssh-agent -s`

  if test -f $HOME/.linuxbrew/bin/brew; then
    export HOMEBREW_ROOT=$HOME/.linuxbrew
  else
    export HOMEBREW_ROOT=/home/linuxbrew/.linuxbrew
  fi
  ;;
esac

if [ -f $RYE_HOME/env ] ; then
  source $RYE_HOME/env
fi

if [[ -v HOMEBREW_ROOT ]] ; then
  export PATH=$HOMEBREW_ROOT/sbin:$PATH
  export PATH=$HOMEBREW_ROOT/bin:$PATH
fi

for prefix in $HOME $HOME/.local $HOME/dotfiles $GOPATH; do
  export PATH=$PATH:$prefix/bin
done

if command -v brew > /dev/null; then
  export BREW_HOME=$(brew --prefix)
  export HOMEBREW_NO_AUTO_UPDATE=1
  eval $(brew shellenv)

  if [ -d "$HOMEBREW_ROOT/opt/xz" ]; then
    export CONFIGURE_OPTS="--enable-shared"
    export CPPFLAGS="-I$(brew --prefix xz)/include"
    export LDFLAGS="-L$(brew --prefix xz)/lib"
  fi

  if [ -d "$HOMEBREW_ROOT/opt/openjdk" ]; then
    export PATH="/opt/homebrew/opt/openjdk/bin:$PATH"
    export CPPFLAGS="$CPPFLAGS:-I/opt/homebrew/opt/openjdk/include"
  fi

  if [ -d "$HOMEBREW_ROOT/opt/libpq/bin" ]; then
    export PATH="/opt/homebrew/opt/libpq/bin:$PATH"
  fi
fi

export PYTHONSYSTEMPATH=$(which python3)

# NOTE; Utilities

function current_context () {
  if test -f ~/.kubectl-hide-current-ctx; then
    return
  fi

  if ! command -v kubectl > /dev/null; then
    return
  fi

  current_context=$(command kubectl config current-context) &> /dev/null
  if [ "$?" -ne 0 ]; then
    return
  fi

  echo "[$fg_bold[blue]$current_context$reset_color]"
}

function current_path () {
  echo "[$fg_bold[yellow]%~$reset_color]"
}

function current_timestamp () {
  echo "[$fg_bold[green]$(date +'%H:%M:%S')$reset_color]"
}

function parse_git_branch() {
  (git symbolic-ref -q HEAD || git name-rev --name-only --no-undefined --always HEAD) 2> /dev/null
}

function current_git_status () {
  local git_branch="$(parse_git_branch)"

  if [ -z "$git_branch" ]; then
    echo ""
    return
  fi

  UNTRACK_STATUS=""
  if [[ -n $(git ls-files --other --exclude-standard 2> /dev/null) ]]; then
    UNTRACK_STATUS+="$fg_bold[red]u$reset_color"
  fi

  if ! git diff --quiet 2> /dev/null; then
    UNTRACK_STATUS+="$fg_bold[yellow]e$reset_color"
  fi

  if ! git diff --cached --quiet 2> /dev/null; then
    UNTRACK_STATUS+="$fg_bold[green]s$reset_color"
  fi

  STATUS="$fg_bold[red]${${git_branch}#(refs/heads/|tags/)}$reset_color"
  if [ -n "$UNTRACK_STATUS" ]; then
    echo "[$UNTRACK_STATUS$fg_bold[gray]@$STATUS$reset_color]"
  else
    echo "[$fg_bold[bold]@$STATUS$reset_color]"
  fi

}

PROMPT='$(current_timestamp)$(current_platform)$(current_context)$(current_path)$(current_git_status)'
PROMPT+=$'\n'
PROMPT+='> '
SPROMPT="${fg[red]}%r$reset_color is correct? [y, n, a, e]:"

if command -v fzf > /dev/null; then
  source <(fzf --zsh)
fi

if command -v nodenv > /dev/null; then
  eval "$(nodenv init -)"
  export PATH=$PATH:"$(npm get prefix --global)/bin"
fi

if command -v nvim > /dev/null; then
  alias vim=nvim
  export EDITOR=nvim
fi

if command -v sheldon > /dev/null; then
  eval "$(sheldon -q source)"
fi

if command -v zoxide > /dev/null; then
  eval "$(zoxide init zsh)"
  alias cd=z
fi

if command -v kubectl > /dev/null; then
  export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"
  source <(kubectl completion zsh)
  alias k=kubectl
  compdef _kubectl k
fi

if [ -f "$HOME/.cargo/env" ]; then
  . "$HOME/.cargo/env"
fi

for source in $(find $HIMKT_DOTFILES_PRIVATE_CONFIG_DIR -name "*.post.zsh")
do
  source $source
done
