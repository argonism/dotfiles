#!/usr/bin/env python3

import argparse
import datetime
import json
import os
import subprocess
from typing import Dict
from typing import Optional


def assume_role(arn: str, role_session_name: str, mfa_token: Optional[str]):
    """Assume role

    Args:
    - arn (str): AWS ARN of IAM
    - role_session_name (str): Name of session
    - mfa_token (Optional[str]): MFA token

    """

    cmd = [
        "aws",
        "sts",
        "assume-role",
        "--role-arn",
        arn,
        "--role-session-name",
        role_session_name,
    ]
    if mfa_token is not None:
        cmd.extend([
            "--token-code",
            mfa_token,
        ])

    output = subprocess.check_output(cmd).decode("utf-8")
    session_info = json.loads(output)
    credentials: Dict[str, str] = session_info["Credentials"]

    expiration_dt: datetime.datetime = datetime.datetime.fromisoformat(
        credentials["Expiration"],
    )
    current_dt = datetime.datetime.now(tz=expiration_dt.tzinfo)
    print(f"Expires in {(expiration_dt - current_dt).seconds}sec")

    os.environ["AWS_ACCESS_KEY_ID"] = credentials["AccessKeyId"]
    os.environ["AWS_SECRET_ACCESS_KEY"] = credentials["SecretAccessKey"]
    os.environ["AWS_SESSION_TOKEN"] = credentials["SessionToken"]
    os.environ["AWS_DEFAULT_REGION"] = credentials.get("AWS_DEFAULT_REGION", "ap-northeast-1")  # NOQA
    os.environ["AWS_REGION"] = credentials.get("AWS_REGION", "ap-northeast-1")

    shell = os.environ.get("SHELL", "bash")
    os.system(f"exec {shell}")


def get_mfa_token(mfa: bool):
    """Get MFA token if it is needed.

    Args:
    - mfa (bool)

    """
    if mfa:
        return input("MFA: ")
    return None


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--role-arn", type=str, required=True)
    parser.add_argument("--role-session-name", default="cli")
    parser.add_argument("--mfa", action="store_true")
    args = parser.parse_args()
    mfa_token = get_mfa_token(args.mfa)
    assume_role(args.role_arn, args.role_session_name, mfa_token)
