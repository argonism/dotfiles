#!/usr/bin/env python3

import argparse
import datetime
import os
from typing import Any
from typing import Dict
from typing import Optional

try:
    import boto3
except ModuleNotFoundError:
    raise ImportError("Please install boto3: `pip install boto3`.")


def assume_role(arn: str, mfa_token: Optional[str]):
    """Assume role

    Args:
    - arn (str): AWS ARN of IAM
    - mfa_token (Optional[str]): MFA token

    """
    client = boto3.client("sts")

    args = {
        "RoleArn": arn,
        "RoleSessionName": "tmp-himkt",
    }

    if mfa_token is not None:
        args["TokenCode"] = mfa_token

    credentials: Dict[str, Any] = client.assume_role(**args)["Credentials"]

    expiration_dt: datetime.datetime = credentials["Expiration"]
    current_dt = datetime.datetime.now(tz=expiration_dt.tzinfo)
    print(f"Expires in {(expiration_dt - current_dt).seconds}sec")

    os.environ["AWS_ACCESS_KEY_ID"] = credentials["AccessKeyId"]
    os.environ["AWS_SECRET_ACCESS_KEY"] = credentials["SecretAccessKey"]
    os.environ["AWS_SESSION_TOKEN"] = credentials["SessionToken"]
    os.environ["AWS_DEFAULT_REGION"] = credentials.get("AWS_DEFAULT_REGION", "ap-northeast-1")  # NOQA
    os.environ["AWS_REGION"] = credentials.get("AWS_REGION", "ap-northeast-1")

    shell = os.environ.get("SHELL", "bash")
    os.system(f"exec {shell}")


def get_mfa_token(mfa: bool):
    """Get MFA token if it is needed.

    Args:
    - mfa (bool)

    """
    if mfa:
        return input("MFA: ")
    return None


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--role-arn", type=str, required=True)
    parser.add_argument("--mfa", action="store_true")
    args = parser.parse_args()
    mfa_token = get_mfa_token(args.mfa)
    assume_role(args.role_arn, mfa_token)
