#!/usr/bin/env python3

import argparse
import os
import pathlib
from subprocess import call


def tips_home() -> pathlib.Path:
    default = pathlib.Path.home() / "dotfiles" / "tips"
    return pathlib.Path(os.getenv("TIPS_HOME", default)) / "tips.d"


def list_tips() -> list[str]:
    return [name.name for name in tips_home().iterdir()]


def show_tips(name: str, query: str | None) -> None:
    tips_file = tips_home() / name / "tips"
    if not tips_file.exists():
        print(f"No tips available for {name}")
    with open(tips_file) as f:
        for tip in f.readlines():
            tip = tip.rstrip()
            if query is not None and query not in tip:
                continue
            print(tip)


def edit_tips(name: str) -> None:
    tips_file = tips_home() / name / "tips"
    EDITOR = os.environ.get("EDITOR", "vim")
    call([EDITOR, tips_file.as_posix()])


def main(args: argparse.Namespace) -> None:
    if not tips_home().exists():
        print(f"No tips.d found on {tips_home().parent}")
        return
    if args.list:
        for name in list_tips():
            print(name)
        return
    if args.name is None:
        print("[name] is required if --list is not specified.")
        return
    if args.edit:
        edit_tips(args.name)
        print(f"Tips for {args.name} updated.")
        return
    show_tips(args.name, args.query)


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--list", "-l", action="store_true")
    parser.add_argument("--name", type=str)
    parser.add_argument("--edit", action="store_true")
    parser.add_argument("--query", "-q")
    args = parser.parse_args()

    main(args)
