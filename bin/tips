#!/usr/bin/env python3

import argparse
import os
import pathlib
from subprocess import call


def tips_home() -> pathlib.Path:
    default = pathlib.Path.home() / "dotfiles" / "tips"
    return pathlib.Path(os.getenv("TIPS_HOME", default)) / "tips.d"


def list_tips() -> list[str]:
    return [name.name for name in tips_home().iterdir()]


def show_tips(name: str, query: str | None) -> None:
    tips_file = tips_home() / name / "tips"
    if not tips_file.exists():
        print(f"No tips available for {name}")
    with open(tips_file) as f:
        for tip in f.readlines():
            tip = tip.rstrip()
            if query is not None and query not in tip:
                continue
            print(tip)


def edit_tips(name: str) -> None:
    tips_file = tips_home() / name / "tips"
    EDITOR = os.environ.get("EDITOR", "vim")
    call([EDITOR, tips_file.as_posix()])


def main(args: argparse.Namespace) -> None:
    if not tips_home().exists():
        print(f"No tips.d found on {tips_home().parent}")
        return

    if args.sub_parser == "list":
        for name in list_tips():
            print(name)

    elif args.sub_parser == "show":
        show_tips(args.name, args.query)

    elif args.sub_parser == "edit":
        edit_tips(args.name)
        print(f"Tips for {args.name} updated.")


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    sub_parsers = parser.add_subparsers(help="sub command help", dest="sub_parser")

    show_parser = sub_parsers.add_parser("show")
    show_parser.add_argument("name", type=str, default=None)
    show_parser.add_argument("--query", "-q")

    edit_parser = sub_parsers.add_parser("edit")
    edit_parser.add_argument("name", type=str, default=None)

    list_parser = sub_parsers.add_parser("list")

    args = parser.parse_args()
    main(args)
