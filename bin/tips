#!/usr/bin/env python3

import argparse
import os
import pathlib
from subprocess import call


def tips_home() -> pathlib.Path:
    default = pathlib.Path.home() / "dotfiles" / "tips"
    return pathlib.Path(os.getenv("TIPS_HOME", default)) / "tips.d"


def list_tips(args: argparse.Namespace) -> None:
    if (name := args.name) is None:
        for _tips_dir in tips_home().iterdir():
            name = _tips_dir.name
            if args.query is not None and args.query not in name:
                continue
            print(name)
        return

    tips_file = tips_home() / name / "tips"
    if not tips_file.exists():
        print(f"No tips available for {args.name}")
        return
    with open(tips_file) as f:
        for tip in f.readlines():
            tip = tip.rstrip()
            if args.query is not None and args.query not in tip:
                continue
            print(tip)


def init_tips(args: argparse.Namespace) -> None:
    tips_file: pathlib.Path = tips_home() / args.name / "tips"
    if tips_file.exists():
        print(f"Tips for {args.name} already exists.")
        return
    tips_file.parent.mkdir(exist_ok=True)
    tips_file.touch()
    print(f"Created tips for {args.name}")


def edit_tips(args: argparse.Namespace) -> None:
    tips_file = tips_home() / args.name / "tips"
    if not tips_file.exists():
        print(f"No tips available for {args.name}")
        return
    EDITOR = os.environ.get("EDITOR", "vim")
    call([EDITOR, tips_file.as_posix()])
    print(f"Tips for {args.name} updated.")


def main(args: argparse.Namespace) -> None:
    if not tips_home().exists():
        print(f"No tips.d found on {tips_home().parent}.")
        return

    actions = {
        "list": list_tips,
        "edit": edit_tips,
        "init": init_tips,
    }
    if args.sub_parser is None:
        commands = ", ".join(actions.keys())
        print(f"Available commands: {commands}")
        return

    actions[args.sub_parser](args)


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--version", "-v", action="version", version="0.0.1")
    sub_parsers = parser.add_subparsers(help="sub command help", dest="sub_parser")

    edit_parser = sub_parsers.add_parser("edit")
    edit_parser.add_argument("name", type=str, default=None)

    init_parser = sub_parsers.add_parser("init")
    init_parser.add_argument("name", type=str)

    list_parser = sub_parsers.add_parser("list")
    list_parser.add_argument("name", type=str, nargs="?")
    list_parser.add_argument("--query", "-q")

    args = parser.parse_args()
    main(args)
