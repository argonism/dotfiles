#!env python3
# -*- mode: python; tab-width: 4 -*-
import argparse
import os
import shutil
import subprocess
import sys

"""
Example of `--gen-input-cmd gen.py`

> file gen.py
gen.py: Python script text executable, ASCII text

> cat gen.py
```python3
#!/usr/bin/python3
import random
n = random.randint(1, 5)
a = [str(random.randint(0, 10)) for _ in range(n)]
with open("in.txt", "w") as f:
    print(n, file=f)
    print(" ".join(a), file=f)
```
"""

class bcolors:
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'

devnull = open(os.devnull, "w")


def run_and_decode(args: list[str]) -> str:
    ret = subprocess.check_output(args, stdin=open("in.txt"), stderr=devnull)
    return ret.decode("utf-8").rstrip()


def verify(args: argparse.Namespace):
    name: str = args.name

    if shutil.which(args.gen_input_cmd) is not None:
        gen_input_cmd = args.gen_input_cmd
    else:
        gen_input_cmd = [os.path.abspath(args.gen_input_cmd)]
    subprocess.check_call(gen_input_cmd, stdout=devnull, stderr=devnull)

    run_cmd: list[str] = args.run_cmd.split(" ")
    ret_cmd = [s.format(argv0=name) for s in run_cmd]
    ret_lazy_cmd = [s.format(argv0=f"{name}_lazy") for s in run_cmd]

    ret = run_and_decode(ret_cmd)
    if args.without_lazy:
        print("Run: " + bcolors.OKGREEN + "passed" + bcolors.ENDC)
        return

    ret_lazy = run_and_decode(ret_lazy_cmd)

    if ret_lazy == ret:
        print("Check: " + bcolors.OKGREEN + "passed" + bcolors.ENDC)
    else:
        print("Check: " + bcolors.FAIL + "failed" + bcolors.ENDC)
        print("Found the edge case and stored in in.txt.", end="")
        print(" (output: expected=" + bcolors.OKGREEN + ret_lazy + bcolors.ENDC, end="")
        print(", got=" + bcolors.FAIL + ret + bcolors.ENDC + ")")
        sys.exit(1)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument("name", help="Name to be passed to `--run-cmd`.")
    parser.add_argument(
        "--gen-input-cmd",
        help=(
            "Command or executable file. "
            "Given command or executable\n"
            "file must create `in.txt` on a current directory.\n"
            "(default: gen.py)\n\n"
        ),
        default="gen.py",
    )
    parser.add_argument(
        "--run-cmd",
        help=(
            "Command to run a program that solves a problem.\n"
            "Must contains special string \"{argv0}\", which will be\n"
            "replaced with the positional argument you provide.\n\n"
            "Command will be executed twice, \n"
            "one is with ${name} you provide as positional argument\n"
            "and another is with ${name}_lazy.\n"
            "(i.e. {argv0} will be replaced by {argv0}_lazy).\n\n"
            "ac-random-test will continue to run these commands\n"
            "until outputs become different (i.e. find a corner case).\n"
            "(default: \"cargo run --bin {argv0}\")\n\n"
        ),
        default="cargo run --bin {argv0}",
    )
    parser.add_argument(
        "--without-lazy",
        action="store_true",
        help=(
            "If this option is specified, it will continue to run a\n"
            "given program until fail."
        ),
    )
    while 1:
        verify(parser.parse_args())
