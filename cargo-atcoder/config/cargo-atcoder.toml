[atcoder]
submit_via_binary = false # submit via binary by default
use_cross = false         # use `cross` instead of `cargo` when generating binaries
binary_column = 80        # maximum column number of generated binary (0 for no wrapping)
update_interval = 1000    # interval time of fetching result (ms)
strip_path = "strip"      # specify `strip` command path. NOTE: if you use macOS, you have to install GNU strip and specify its path here.

[profile]
# target to use to generate binary
target = "x86_64-unknown-linux-musl"

[profile.release]
lto = true
panic = 'abort'

# dependencies added to new project
[dependencies]
# proconio = "*"
# competitive = { git = "https://github.com/tanakh/competitive-rs.git" }

[project]
# to create `rust-toolchain` file, uncomment this line.
# rustc_version = "1.15.1"

# source code template
template = """
#[allow(clippy::needless_range_loop)]
fn main() {
    let mut scanner = Scanner::new();
}

use std::io::Write;
pub fn flush() { std::io::stdout().flush().unwrap(); }
pub struct Scanner { stdin: std::io::Stdin, buffer: std::collections::VecDeque<String> }
impl Scanner {
    fn new() -> Self {
        Self { stdin: std::io::stdin(), buffer: std::collections::VecDeque::new() }
    }

    pub fn cin<T: std::str::FromStr>(&mut self) -> T {
        while self.buffer.is_empty() {
            let mut line = String::new();
            let _ = self.stdin.read_line(&mut line);
            line.split_whitespace().for_each(|x| self.buffer.push_back(String::from(x)));
        }
        self.buffer.pop_front().unwrap().parse::<T>().ok().unwrap()
    }

    pub fn vec<T: std::str::FromStr>(&mut self, n: usize) -> Vec<T> {
        (0..n).map(|_| self.cin()).collect()
    }
}
"""
