snippet mod
const int mod = 1e9+7;


struct mint {
	long long x; // typedef long long long long;
	mint(long long x=0):x((x%mod+mod)%mod){}
	mint operator-() const { return mint(-x);}
	mint& operator+=(const mint a) {
	if ((x += a.x) >= mod) x -= mod;
		return *this;
	}
	mint& operator-=(const mint a) {
		if ((x += mod-a.x) >= mod) x -= mod;
		return *this;
	}
	mint& operator*=(const mint a) {
		(x *= a.x) %= mod;
		return *this;
	}
	mint operator+(const mint a) const {
		mint res(*this);
		return res+=a;
	}
	mint operator-(const mint a) const {
		mint res(*this);
		return res-=a;
	}
	mint operator*(const mint a) const {
		mint res(*this);
		return res*=a;
	}
	mint pow(long long t) const {
		if (!t) return 1;
		mint a = pow(t>>1);
		a *= a;
		if (t&1) a *= *this;
		return a;
	}

	// for prime mod
	mint inv() const {
		return pow(mod-2);
	}
	mint& operator/=(const mint a) {
		return (*this) *= a.inv();
	}
	mint operator/(const mint a) const {
		mint res(*this);
		return res/=a;
	}
};


mint modpow(long long N, long long P) {
	if (P == 0) return 1;

	if (P % 2 == 0) {
		mint t = modpow(N, P / 2);
		return t * t;
	}

	mint t = modpow(N, P - 1);
	t *= N;
	return t;
}


mint choose(int n, int a) {
	mint x = 1, y = 1;
	for (int i=0; i<a; i++) {
		x *= n-i;
		y *= i+1;
	}
	return x / y;
}
endsnippet
